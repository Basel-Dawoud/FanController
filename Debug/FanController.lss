
FanController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000023f0  00002484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800188  00800188  000025ac  2**0
                  ALLOC
  3 .stab         00001db8  00000000  00000000  000025ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e44  00000000  00000000  00004364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000051a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000553a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007945  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000acc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 57       	subi	r30, 0x78	; 120
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
#include "DC.h"
#include "lcd.h"
#include "lm35_sensor.h"
#include "std_types.h"

int main(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <main+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62

	uint8 temp=0;
     e3a:	19 82       	std	Y+1, r1	; 0x01

	ADC_ConfigType ADC_ConfigType = {Internal_2_56v, DF_8};
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	8a 83       	std	Y+2, r24	; 0x02
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	8b 83       	std	Y+3, r24	; 0x03

	/*Initialization for the modules*/
	ADC_init(&ADC_ConfigType);
     e44:	ce 01       	movw	r24, r28
     e46:	02 96       	adiw	r24, 0x02	; 2
     e48:	0e 94 43 08 	call	0x1086	; 0x1086 <ADC_init>
	DcMotor_Init();
     e4c:	0e 94 91 07 	call	0xf22	; 0xf22 <DcMotor_Init>
	LCD_init();
     e50:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_init>
	LCD_displayStringRowColumn(0,3,"FAN IS OFF");
     e54:	20 e6       	ldi	r18, 0x60	; 96
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	63 e0       	ldi	r22, 0x03	; 3
     e5c:	a9 01       	movw	r20, r18
     e5e:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,3,"Temp=    C");
     e62:	2b e6       	ldi	r18, 0x6B	; 107
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	63 e0       	ldi	r22, 0x03	; 3
     e6a:	a9 01       	movw	r20, r18
     e6c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_displayStringRowColumn>

	for (;;){

		/*Get the sensor value*/
		temp= LM35_getTemperature();
     e70:	0e 94 16 11 	call	0x222c	; 0x222c <LM35_getTemperature>
     e74:	89 83       	std	Y+1, r24	; 0x01

		/*Printing on the LCD*/
		if (temp>=100)
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	84 36       	cpi	r24, 0x64	; 100
     e7a:	50 f0       	brcs	.+20     	; 0xe90 <main+0x62>
			{
				LCD_moveCursor(1,9);
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	69 e0       	ldi	r22, 0x09	; 9
     e80:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_moveCursor>
				LCD_intgerToString(temp);
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	88 2f       	mov	r24, r24
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_intgerToString>
     e8e:	10 c0       	rjmp	.+32     	; 0xeb0 <main+0x82>
			}
		else
			{
				LCD_moveCursor(1,9);
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	69 e0       	ldi	r22, 0x09	; 9
     e94:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_moveCursor>
				LCD_intgerToString(temp);
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LCD_intgerToString>
				LCD_displayStringRowColumn(1,11," ");
     ea2:	26 e7       	ldi	r18, 0x76	; 118
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	6b e0       	ldi	r22, 0x0B	; 11
     eaa:	a9 01       	movw	r20, r18
     eac:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_displayStringRowColumn>
			}

		/* If the temperature is greater than or equal 90C turn on the fan with 75% of its maximum speed */
		if (temp>=90)
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	8a 35       	cpi	r24, 0x5A	; 90
     eb4:	60 f0       	brcs	.+24     	; 0xece <main+0xa0>
		{
			DcMotor_Rotate(A_CW,75);
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	6b e4       	ldi	r22, 0x4B	; 75
     eba:	0e 94 ac 07 	call	0xf58	; 0xf58 <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,10,"ON ");
     ebe:	28 e7       	ldi	r18, 0x78	; 120
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	6a e0       	ldi	r22, 0x0A	; 10
     ec6:	a9 01       	movw	r20, r18
     ec8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_displayStringRowColumn>
     ecc:	d1 cf       	rjmp	.-94     	; 0xe70 <main+0x42>
		}
		/* If the temperature is greater than or equal 60C turn on the fan with 50% of its maximum speed */
		else if(temp>=60)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	8c 33       	cpi	r24, 0x3C	; 60
     ed2:	60 f0       	brcs	.+24     	; 0xeec <main+0xbe>
		{
			DcMotor_Rotate(A_CW,50);
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	62 e3       	ldi	r22, 0x32	; 50
     ed8:	0e 94 ac 07 	call	0xf58	; 0xf58 <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,10,"ON ");
     edc:	28 e7       	ldi	r18, 0x78	; 120
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	6a e0       	ldi	r22, 0x0A	; 10
     ee4:	a9 01       	movw	r20, r18
     ee6:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_displayStringRowColumn>
     eea:	c2 cf       	rjmp	.-124    	; 0xe70 <main+0x42>
		}
		/* If the temperature is greater than or equal 30C turn on the fan with 25% of its maximum speed */
		else if(temp>=30)
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	8e 31       	cpi	r24, 0x1E	; 30
     ef0:	60 f0       	brcs	.+24     	; 0xf0a <main+0xdc>
		{
			DcMotor_Rotate(A_CW,25);
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	69 e1       	ldi	r22, 0x19	; 25
     ef6:	0e 94 ac 07 	call	0xf58	; 0xf58 <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,10,"ON ");
     efa:	28 e7       	ldi	r18, 0x78	; 120
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	6a e0       	ldi	r22, 0x0A	; 10
     f02:	a9 01       	movw	r20, r18
     f04:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_displayStringRowColumn>
     f08:	b3 cf       	rjmp	.-154    	; 0xe70 <main+0x42>
		}
		/* If the temperature is less than 30C turn off the fan */
		else
		{
			DcMotor_Rotate(STOP,0);
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	0e 94 ac 07 	call	0xf58	; 0xf58 <DcMotor_Rotate>
			LCD_displayStringRowColumn(0,10,"OFF");
     f12:	2c e7       	ldi	r18, 0x7C	; 124
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	6a e0       	ldi	r22, 0x0A	; 10
     f1a:	a9 01       	movw	r20, r18
     f1c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <LCD_displayStringRowColumn>
     f20:	a7 cf       	rjmp	.-178    	; 0xe70 <main+0x42>

00000f22 <DcMotor_Init>:
#include "gpio.h"
#include "PWM.h"


void DcMotor_Init(void)
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	/* set up the two pins of the motor as output pins */
	GPIO_setupPinDirection(IN1_PORT_ID,IN1_PIN_ID, PIN_OUTPUT);
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	0e 94 ad 08 	call	0x115a	; 0x115a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IN2_PIN_ID,IN2_PIN_ID, PIN_OUTPUT);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	41 e0       	ldi	r20, 0x01	; 1
     f3a:	0e 94 ad 08 	call	0x115a	; 0x115a <GPIO_setupPinDirection>

	/* stop the motor at the start */
	GPIO_writePin(IN1_PORT_ID,IN1_PIN_ID, LOGIC_LOW);
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
	GPIO_writePin(IN2_PORT_ID,IN2_PIN_ID, LOGIC_LOW);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <DcMotor_Rotate+0x6>
     f5e:	00 d0       	rcall	.+0      	; 0xf60 <DcMotor_Rotate+0x8>
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	6a 83       	std	Y+2, r22	; 0x02
	Timer0_PWM_Init(speed);
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <Timer0_PWM_Init>

	switch(state)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3c 83       	std	Y+4, r19	; 0x04
     f76:	2b 83       	std	Y+3, r18	; 0x03
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	9c 81       	ldd	r25, Y+4	; 0x04
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	a1 f0       	breq	.+40     	; 0xfaa <DcMotor_Rotate+0x52>
     f82:	2b 81       	ldd	r18, Y+3	; 0x03
     f84:	3c 81       	ldd	r19, Y+4	; 0x04
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	31 05       	cpc	r19, r1
     f8a:	d1 f0       	breq	.+52     	; 0xfc0 <DcMotor_Rotate+0x68>
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	01 f5       	brne	.+64     	; 0xfd4 <DcMotor_Rotate+0x7c>
	{
	case CW:
		GPIO_writePin(IN1_PORT_ID,IN1_PIN_ID, LOGIC_HIGH);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	41 e0       	ldi	r20, 0x01	; 1
     f9a:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID,IN2_PIN_ID, LOGIC_LOW);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
     fa8:	15 c0       	rjmp	.+42     	; 0xfd4 <DcMotor_Rotate+0x7c>
		break;

	case A_CW:
		GPIO_writePin(IN1_PORT_ID,IN1_PIN_ID, LOGIC_LOW);
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	40 e0       	ldi	r20, 0x00	; 0
     fb0:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID,IN2_PIN_ID, LOGIC_HIGH);
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	41 e0       	ldi	r20, 0x01	; 1
     fba:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <DcMotor_Rotate+0x7c>
		break;

	case STOP:
		GPIO_writePin(IN1_PORT_ID,IN1_PIN_ID, LOGIC_LOW);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID,IN2_PIN_ID, LOGIC_LOW);
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
		break;
	}
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <Timer0_PWM_Init>:
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void Timer0_PWM_Init(uint8 set_duty_cycle)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	0f 92       	push	r0
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	89 83       	std	Y+1, r24	; 0x01

	OCR0= (uint8)(((uint16)(set_duty_cycle*255))/(100));  // Set Compare Value
     fee:	ec e5       	ldi	r30, 0x5C	; 92
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	48 2f       	mov	r20, r24
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	ca 01       	movw	r24, r20
     ffa:	9c 01       	movw	r18, r24
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	c9 01       	movw	r24, r18
    1002:	96 95       	lsr	r25
    1004:	98 2f       	mov	r25, r24
    1006:	88 27       	eor	r24, r24
    1008:	97 95       	ror	r25
    100a:	87 95       	ror	r24
    100c:	82 1b       	sub	r24, r18
    100e:	93 0b       	sbc	r25, r19
    1010:	84 0f       	add	r24, r20
    1012:	95 1f       	adc	r25, r21
    1014:	24 e6       	ldi	r18, 0x64	; 100
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	b9 01       	movw	r22, r18
    101a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__udivmodhi4>
    101e:	cb 01       	movw	r24, r22
    1020:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1022:	a7 e3       	ldi	r26, 0x37	; 55
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e3       	ldi	r30, 0x37	; 55
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 60       	ori	r24, 0x08	; 8
    102e:	8c 93       	st	X, r24

	/* to make PWM mode and non-inverting mode
		 *  and prescalar of 8 */

	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01);
    1030:	e3 e5       	ldi	r30, 0x53	; 83
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	8a e6       	ldi	r24, 0x6A	; 106
    1036:	80 83       	st	Z, r24
	TCNT0=0; // Set Timer Initial Value to 0
    1038:	e2 e5       	ldi	r30, 0x52	; 82
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	10 82       	st	Z, r1
}
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <__vector_16>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(ADC_vect)
{
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	8f 93       	push	r24
    1052:	9f 93       	push	r25
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Data after conversion complete */
	g_adcResult = ADC;
    1060:	e4 e2       	ldi	r30, 0x24	; 36
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	91 81       	ldd	r25, Z+1	; 0x01
    1068:	90 93 89 01 	sts	0x0189, r25
    106c:	80 93 88 01 	sts	0x0188, r24
}
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <ADC_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <ADC_init+0x6>
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	9a 83       	std	Y+2, r25	; 0x02
    1092:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    1094:	e7 e2       	ldi	r30, 0x27	; 39
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	10 82       	st	Z, r1
	ADMUX |= (Config_Ptr->ref_volt << 6);
    109a:	a7 e2       	ldi	r26, 0x27	; 39
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e7 e2       	ldi	r30, 0x27	; 39
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	e9 81       	ldd	r30, Y+1	; 0x01
    10a8:	fa 81       	ldd	r31, Y+2	; 0x02
    10aa:	80 81       	ld	r24, Z
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	00 24       	eor	r0, r0
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	07 94       	ror	r0
    10b8:	96 95       	lsr	r25
    10ba:	87 95       	ror	r24
    10bc:	07 94       	ror	r0
    10be:	98 2f       	mov	r25, r24
    10c0:	80 2d       	mov	r24, r0
    10c2:	82 2b       	or	r24, r18
    10c4:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Enable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN);
    10c6:	e6 e2       	ldi	r30, 0x26	; 38
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 e8       	ldi	r24, 0x80	; 128
    10cc:	80 83       	st	Z, r24
	ADCSRA |= (Config_Ptr->prescaler);
    10ce:	a6 e2       	ldi	r26, 0x26	; 38
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e6 e2       	ldi	r30, 0x26	; 38
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	90 81       	ld	r25, Z
    10d8:	e9 81       	ldd	r30, Y+1	; 0x01
    10da:	fa 81       	ldd	r31, Y+2	; 0x02
    10dc:	81 81       	ldd	r24, Z+1	; 0x01
    10de:	89 2b       	or	r24, r25
    10e0:	8c 93       	st	X, r24

	/* internal reference voltage 2.56 voltage and prescaler F_CPU/8 */
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	0f 92       	push	r0
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	87 70       	andi	r24, 0x07	; 7
    10fc:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    10fe:	a7 e2       	ldi	r26, 0x27	; 39
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e7 e2       	ldi	r30, 0x27	; 39
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 7e       	andi	r24, 0xE0	; 224
    110a:	8c 93       	st	X, r24
	ADMUX |= channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    110c:	a7 e2       	ldi	r26, 0x27	; 39
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e2       	ldi	r30, 0x27	; 39
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	90 81       	ld	r25, Z
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	89 2b       	or	r24, r25
    111a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    111c:	a6 e2       	ldi	r26, 0x26	; 38
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e6 e2       	ldi	r30, 0x26	; 38
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	80 64       	ori	r24, 0x40	; 64
    1128:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    112a:	e6 e2       	ldi	r30, 0x26	; 38
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	80 71       	andi	r24, 0x10	; 16
    1136:	90 70       	andi	r25, 0x00	; 0
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	b9 f3       	breq	.-18     	; 0x112a <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    113c:	a6 e2       	ldi	r26, 0x26	; 38
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e6 e2       	ldi	r30, 0x26	; 38
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	80 61       	ori	r24, 0x10	; 16
    1148:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    114a:	e4 e2       	ldi	r30, 0x24	; 36
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	91 81       	ldd	r25, Z+1	; 0x01
}
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <GPIO_setupPinDirection+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <GPIO_setupPinDirection+0x8>
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	6a 83       	std	Y+2, r22	; 0x02
    116c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	08 f0       	brcs	.+2      	; 0x1176 <GPIO_setupPinDirection+0x1c>
    1174:	d5 c0       	rjmp	.+426    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	08 f0       	brcs	.+2      	; 0x117e <GPIO_setupPinDirection+0x24>
    117c:	d1 c0       	rjmp	.+418    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3d 83       	std	Y+5, r19	; 0x05
    1186:	2c 83       	std	Y+4, r18	; 0x04
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <GPIO_setupPinDirection+0x3a>
    1192:	43 c0       	rjmp	.+134    	; 0x121a <GPIO_setupPinDirection+0xc0>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	2c f4       	brge	.+10     	; 0x11a8 <GPIO_setupPinDirection+0x4e>
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	9d 81       	ldd	r25, Y+5	; 0x05
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <GPIO_setupPinDirection+0x68>
    11a6:	bc c0       	rjmp	.+376    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
    11a8:	2c 81       	ldd	r18, Y+4	; 0x04
    11aa:	3d 81       	ldd	r19, Y+5	; 0x05
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <GPIO_setupPinDirection+0x5a>
    11b2:	5f c0       	rjmp	.+190    	; 0x1272 <GPIO_setupPinDirection+0x118>
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	91 05       	cpc	r25, r1
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <GPIO_setupPinDirection+0x66>
    11be:	85 c0       	rjmp	.+266    	; 0x12ca <GPIO_setupPinDirection+0x170>
    11c0:	af c0       	rjmp	.+350    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	a1 f4       	brne	.+40     	; 0x11f0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    11c8:	aa e3       	ldi	r26, 0x3A	; 58
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ea e3       	ldi	r30, 0x3A	; 58
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <GPIO_setupPinDirection+0x8c>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <GPIO_setupPinDirection+0x88>
    11ea:	84 2b       	or	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	98 c0       	rjmp	.+304    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    11f0:	aa e3       	ldi	r26, 0x3A	; 58
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	ea e3       	ldi	r30, 0x3A	; 58
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <GPIO_setupPinDirection+0xb4>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <GPIO_setupPinDirection+0xb0>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	83 c0       	rjmp	.+262    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	81 30       	cpi	r24, 0x01	; 1
    121e:	a1 f4       	brne	.+40     	; 0x1248 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1220:	a7 e3       	ldi	r26, 0x37	; 55
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e7 e3       	ldi	r30, 0x37	; 55
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_setupPinDirection+0xe4>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_setupPinDirection+0xe0>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	6c c0       	rjmp	.+216    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1248:	a7 e3       	ldi	r26, 0x37	; 55
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e7 e3       	ldi	r30, 0x37	; 55
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_setupPinDirection+0x10c>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_setupPinDirection+0x108>
    126a:	80 95       	com	r24
    126c:	84 23       	and	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	57 c0       	rjmp	.+174    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	a1 f4       	brne	.+40     	; 0x12a0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1278:	a4 e3       	ldi	r26, 0x34	; 52
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e4 e3       	ldi	r30, 0x34	; 52
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_setupPinDirection+0x13c>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_setupPinDirection+0x138>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	40 c0       	rjmp	.+128    	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12a0:	a4 e3       	ldi	r26, 0x34	; 52
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e4 e3       	ldi	r30, 0x34	; 52
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_setupPinDirection+0x164>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_setupPinDirection+0x160>
    12c2:	80 95       	com	r24
    12c4:	84 23       	and	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	2b c0       	rjmp	.+86     	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	a1 f4       	brne	.+40     	; 0x12f8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    12d0:	a1 e3       	ldi	r26, 0x31	; 49
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e1 e3       	ldi	r30, 0x31	; 49
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <GPIO_setupPinDirection+0x194>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <GPIO_setupPinDirection+0x190>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	14 c0       	rjmp	.+40     	; 0x1320 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    12f8:	a1 e3       	ldi	r26, 0x31	; 49
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e1 e3       	ldi	r30, 0x31	; 49
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_setupPinDirection+0x1bc>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_setupPinDirection+0x1b8>
    131a:	80 95       	com	r24
    131c:	84 23       	and	r24, r20
    131e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <GPIO_writePin+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <GPIO_writePin+0x8>
    1338:	0f 92       	push	r0
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	6a 83       	std	Y+2, r22	; 0x02
    1342:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	08 f0       	brcs	.+2      	; 0x134c <GPIO_writePin+0x1c>
    134a:	d5 c0       	rjmp	.+426    	; 0x14f6 <GPIO_writePin+0x1c6>
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	84 30       	cpi	r24, 0x04	; 4
    1350:	08 f0       	brcs	.+2      	; 0x1354 <GPIO_writePin+0x24>
    1352:	d1 c0       	rjmp	.+418    	; 0x14f6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	3d 83       	std	Y+5, r19	; 0x05
    135c:	2c 83       	std	Y+4, r18	; 0x04
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	91 05       	cpc	r25, r1
    1366:	09 f4       	brne	.+2      	; 0x136a <GPIO_writePin+0x3a>
    1368:	43 c0       	rjmp	.+134    	; 0x13f0 <GPIO_writePin+0xc0>
    136a:	2c 81       	ldd	r18, Y+4	; 0x04
    136c:	3d 81       	ldd	r19, Y+5	; 0x05
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	2c f4       	brge	.+10     	; 0x137e <GPIO_writePin+0x4e>
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	71 f0       	breq	.+28     	; 0x1398 <GPIO_writePin+0x68>
    137c:	bc c0       	rjmp	.+376    	; 0x14f6 <GPIO_writePin+0x1c6>
    137e:	2c 81       	ldd	r18, Y+4	; 0x04
    1380:	3d 81       	ldd	r19, Y+5	; 0x05
    1382:	22 30       	cpi	r18, 0x02	; 2
    1384:	31 05       	cpc	r19, r1
    1386:	09 f4       	brne	.+2      	; 0x138a <GPIO_writePin+0x5a>
    1388:	5f c0       	rjmp	.+190    	; 0x1448 <GPIO_writePin+0x118>
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <GPIO_writePin+0x66>
    1394:	85 c0       	rjmp	.+266    	; 0x14a0 <GPIO_writePin+0x170>
    1396:	af c0       	rjmp	.+350    	; 0x14f6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	a1 f4       	brne	.+40     	; 0x13c6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    139e:	ab e3       	ldi	r26, 0x3B	; 59
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	eb e3       	ldi	r30, 0x3B	; 59
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_writePin+0x8c>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_writePin+0x88>
    13c0:	84 2b       	or	r24, r20
    13c2:	8c 93       	st	X, r24
    13c4:	98 c0       	rjmp	.+304    	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    13c6:	ab e3       	ldi	r26, 0x3B	; 59
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	eb e3       	ldi	r30, 0x3B	; 59
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <GPIO_writePin+0xb4>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <GPIO_writePin+0xb0>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	83 c0       	rjmp	.+262    	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	a1 f4       	brne	.+40     	; 0x141e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    13f6:	a8 e3       	ldi	r26, 0x38	; 56
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e8 e3       	ldi	r30, 0x38	; 56
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_writePin+0xe4>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_writePin+0xe0>
    1418:	84 2b       	or	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	6c c0       	rjmp	.+216    	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    141e:	a8 e3       	ldi	r26, 0x38	; 56
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e8 e3       	ldi	r30, 0x38	; 56
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_writePin+0x10c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_writePin+0x108>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	57 c0       	rjmp	.+174    	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	a1 f4       	brne	.+40     	; 0x1476 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    144e:	a5 e3       	ldi	r26, 0x35	; 53
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e5 e3       	ldi	r30, 0x35	; 53
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_writePin+0x13c>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_writePin+0x138>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	40 c0       	rjmp	.+128    	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1476:	a5 e3       	ldi	r26, 0x35	; 53
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e5 e3       	ldi	r30, 0x35	; 53
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_writePin+0x164>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_writePin+0x160>
    1498:	80 95       	com	r24
    149a:	84 23       	and	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	2b c0       	rjmp	.+86     	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	a1 f4       	brne	.+40     	; 0x14ce <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    14a6:	a2 e3       	ldi	r26, 0x32	; 50
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e2 e3       	ldi	r30, 0x32	; 50
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_writePin+0x194>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_writePin+0x190>
    14c8:	84 2b       	or	r24, r20
    14ca:	8c 93       	st	X, r24
    14cc:	14 c0       	rjmp	.+40     	; 0x14f6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    14ce:	a2 e3       	ldi	r26, 0x32	; 50
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e2 e3       	ldi	r30, 0x32	; 50
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <GPIO_writePin+0x1bc>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <GPIO_writePin+0x1b8>
    14f0:	80 95       	com	r24
    14f2:	84 23       	and	r24, r20
    14f4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	0f 90       	pop	r0
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <GPIO_readPin+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <GPIO_readPin+0x8>
    150e:	0f 92       	push	r0
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	8a 83       	std	Y+2, r24	; 0x02
    1516:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1518:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	88 30       	cpi	r24, 0x08	; 8
    151e:	08 f0       	brcs	.+2      	; 0x1522 <GPIO_readPin+0x1c>
    1520:	84 c0       	rjmp	.+264    	; 0x162a <GPIO_readPin+0x124>
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	08 f0       	brcs	.+2      	; 0x152a <GPIO_readPin+0x24>
    1528:	80 c0       	rjmp	.+256    	; 0x162a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3d 83       	std	Y+5, r19	; 0x05
    1532:	2c 83       	std	Y+4, r18	; 0x04
    1534:	4c 81       	ldd	r20, Y+4	; 0x04
    1536:	5d 81       	ldd	r21, Y+5	; 0x05
    1538:	41 30       	cpi	r20, 0x01	; 1
    153a:	51 05       	cpc	r21, r1
    153c:	79 f1       	breq	.+94     	; 0x159c <GPIO_readPin+0x96>
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	91 05       	cpc	r25, r1
    1546:	34 f4       	brge	.+12     	; 0x1554 <GPIO_readPin+0x4e>
    1548:	2c 81       	ldd	r18, Y+4	; 0x04
    154a:	3d 81       	ldd	r19, Y+5	; 0x05
    154c:	21 15       	cp	r18, r1
    154e:	31 05       	cpc	r19, r1
    1550:	69 f0       	breq	.+26     	; 0x156c <GPIO_readPin+0x66>
    1552:	6b c0       	rjmp	.+214    	; 0x162a <GPIO_readPin+0x124>
    1554:	4c 81       	ldd	r20, Y+4	; 0x04
    1556:	5d 81       	ldd	r21, Y+5	; 0x05
    1558:	42 30       	cpi	r20, 0x02	; 2
    155a:	51 05       	cpc	r21, r1
    155c:	b9 f1       	breq	.+110    	; 0x15cc <GPIO_readPin+0xc6>
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	9d 81       	ldd	r25, Y+5	; 0x05
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <GPIO_readPin+0x64>
    1568:	49 c0       	rjmp	.+146    	; 0x15fc <GPIO_readPin+0xf6>
    156a:	5f c0       	rjmp	.+190    	; 0x162a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    156c:	e9 e3       	ldi	r30, 0x39	; 57
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <GPIO_readPin+0x7e>
    1580:	55 95       	asr	r21
    1582:	47 95       	ror	r20
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <GPIO_readPin+0x7a>
    1588:	ca 01       	movw	r24, r20
    158a:	81 70       	andi	r24, 0x01	; 1
    158c:	90 70       	andi	r25, 0x00	; 0
    158e:	88 23       	and	r24, r24
    1590:	19 f0       	breq	.+6      	; 0x1598 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	49 c0       	rjmp	.+146    	; 0x162a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1598:	19 82       	std	Y+1, r1	; 0x01
    159a:	47 c0       	rjmp	.+142    	; 0x162a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    159c:	e6 e3       	ldi	r30, 0x36	; 54
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	a9 01       	movw	r20, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_readPin+0xae>
    15b0:	55 95       	asr	r21
    15b2:	47 95       	ror	r20
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_readPin+0xaa>
    15b8:	ca 01       	movw	r24, r20
    15ba:	81 70       	andi	r24, 0x01	; 1
    15bc:	90 70       	andi	r25, 0x00	; 0
    15be:	88 23       	and	r24, r24
    15c0:	19 f0       	breq	.+6      	; 0x15c8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	31 c0       	rjmp	.+98     	; 0x162a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15c8:	19 82       	std	Y+1, r1	; 0x01
    15ca:	2f c0       	rjmp	.+94     	; 0x162a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    15cc:	e3 e3       	ldi	r30, 0x33	; 51
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	a9 01       	movw	r20, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_readPin+0xde>
    15e0:	55 95       	asr	r21
    15e2:	47 95       	ror	r20
    15e4:	8a 95       	dec	r24
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_readPin+0xda>
    15e8:	ca 01       	movw	r24, r20
    15ea:	81 70       	andi	r24, 0x01	; 1
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	88 23       	and	r24, r24
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	19 c0       	rjmp	.+50     	; 0x162a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15f8:	19 82       	std	Y+1, r1	; 0x01
    15fa:	17 c0       	rjmp	.+46     	; 0x162a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15fc:	e0 e3       	ldi	r30, 0x30	; 48
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <GPIO_readPin+0x10e>
    1610:	55 95       	asr	r21
    1612:	47 95       	ror	r20
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <GPIO_readPin+0x10a>
    1618:	ca 01       	movw	r24, r20
    161a:	81 70       	andi	r24, 0x01	; 1
    161c:	90 70       	andi	r25, 0x00	; 0
    161e:	88 23       	and	r24, r24
    1620:	19 f0       	breq	.+6      	; 0x1628 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	01 c0       	rjmp	.+2      	; 0x162a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1628:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	08 95       	ret

0000163c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	00 d0       	rcall	.+0      	; 0x1642 <GPIO_setupPortDirection+0x6>
    1642:	00 d0       	rcall	.+0      	; 0x1644 <GPIO_setupPortDirection+0x8>
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	84 30       	cpi	r24, 0x04	; 4
    1650:	90 f5       	brcc	.+100    	; 0x16b6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	3c 83       	std	Y+4, r19	; 0x04
    165a:	2b 83       	std	Y+3, r18	; 0x03
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	91 05       	cpc	r25, r1
    1664:	d1 f0       	breq	.+52     	; 0x169a <GPIO_setupPortDirection+0x5e>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	2c f4       	brge	.+10     	; 0x167a <GPIO_setupPortDirection+0x3e>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	61 f0       	breq	.+24     	; 0x1690 <GPIO_setupPortDirection+0x54>
    1678:	1e c0       	rjmp	.+60     	; 0x16b6 <GPIO_setupPortDirection+0x7a>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	22 30       	cpi	r18, 0x02	; 2
    1680:	31 05       	cpc	r19, r1
    1682:	81 f0       	breq	.+32     	; 0x16a4 <GPIO_setupPortDirection+0x68>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	91 05       	cpc	r25, r1
    168c:	81 f0       	breq	.+32     	; 0x16ae <GPIO_setupPortDirection+0x72>
    168e:	13 c0       	rjmp	.+38     	; 0x16b6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1690:	ea e3       	ldi	r30, 0x3A	; 58
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	80 83       	st	Z, r24
    1698:	0e c0       	rjmp	.+28     	; 0x16b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    169a:	e7 e3       	ldi	r30, 0x37	; 55
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 83       	st	Z, r24
    16a2:	09 c0       	rjmp	.+18     	; 0x16b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16a4:	e4 e3       	ldi	r30, 0x34	; 52
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	80 83       	st	Z, r24
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16ae:	e1 e3       	ldi	r30, 0x31	; 49
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	80 83       	st	Z, r24
			break;
		}
	}
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <GPIO_writePort+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <GPIO_writePort+0x8>
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	84 30       	cpi	r24, 0x04	; 4
    16d8:	90 f5       	brcc	.+100    	; 0x173e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3c 83       	std	Y+4, r19	; 0x04
    16e2:	2b 83       	std	Y+3, r18	; 0x03
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 05       	cpc	r25, r1
    16ec:	d1 f0       	breq	.+52     	; 0x1722 <GPIO_writePort+0x5e>
    16ee:	2b 81       	ldd	r18, Y+3	; 0x03
    16f0:	3c 81       	ldd	r19, Y+4	; 0x04
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	2c f4       	brge	.+10     	; 0x1702 <GPIO_writePort+0x3e>
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	61 f0       	breq	.+24     	; 0x1718 <GPIO_writePort+0x54>
    1700:	1e c0       	rjmp	.+60     	; 0x173e <GPIO_writePort+0x7a>
    1702:	2b 81       	ldd	r18, Y+3	; 0x03
    1704:	3c 81       	ldd	r19, Y+4	; 0x04
    1706:	22 30       	cpi	r18, 0x02	; 2
    1708:	31 05       	cpc	r19, r1
    170a:	81 f0       	breq	.+32     	; 0x172c <GPIO_writePort+0x68>
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9c 81       	ldd	r25, Y+4	; 0x04
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	91 05       	cpc	r25, r1
    1714:	81 f0       	breq	.+32     	; 0x1736 <GPIO_writePort+0x72>
    1716:	13 c0       	rjmp	.+38     	; 0x173e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1718:	eb e3       	ldi	r30, 0x3B	; 59
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	80 83       	st	Z, r24
    1720:	0e c0       	rjmp	.+28     	; 0x173e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1722:	e8 e3       	ldi	r30, 0x38	; 56
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	80 83       	st	Z, r24
    172a:	09 c0       	rjmp	.+18     	; 0x173e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    172c:	e5 e3       	ldi	r30, 0x35	; 53
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	80 83       	st	Z, r24
    1734:	04 c0       	rjmp	.+8      	; 0x173e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	80 83       	st	Z, r24
			break;
		}
	}
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <GPIO_readPort+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <GPIO_readPort+0x8>
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    175a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	90 f5       	brcc	.+100    	; 0x17c6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3c 83       	std	Y+4, r19	; 0x04
    176a:	2b 83       	std	Y+3, r18	; 0x03
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	91 05       	cpc	r25, r1
    1774:	d1 f0       	breq	.+52     	; 0x17aa <GPIO_readPort+0x5e>
    1776:	2b 81       	ldd	r18, Y+3	; 0x03
    1778:	3c 81       	ldd	r19, Y+4	; 0x04
    177a:	22 30       	cpi	r18, 0x02	; 2
    177c:	31 05       	cpc	r19, r1
    177e:	2c f4       	brge	.+10     	; 0x178a <GPIO_readPort+0x3e>
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	61 f0       	breq	.+24     	; 0x17a0 <GPIO_readPort+0x54>
    1788:	1e c0       	rjmp	.+60     	; 0x17c6 <GPIO_readPort+0x7a>
    178a:	2b 81       	ldd	r18, Y+3	; 0x03
    178c:	3c 81       	ldd	r19, Y+4	; 0x04
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	81 f0       	breq	.+32     	; 0x17b4 <GPIO_readPort+0x68>
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	91 05       	cpc	r25, r1
    179c:	81 f0       	breq	.+32     	; 0x17be <GPIO_readPort+0x72>
    179e:	13 c0       	rjmp	.+38     	; 0x17c6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17a0:	e9 e3       	ldi	r30, 0x39	; 57
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	0e c0       	rjmp	.+28     	; 0x17c6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    17aa:	e6 e3       	ldi	r30, 0x36	; 54
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    17b4:	e3 e3       	ldi	r30, 0x33	; 51
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	89 83       	std	Y+1, r24	; 0x01
    17bc:	04 c0       	rjmp	.+8      	; 0x17c6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    17be:	e0 e3       	ldi	r30, 0x30	; 48
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	2e 97       	sbiw	r28, 0x0e	; 14
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    17ea:	83 e0       	ldi	r24, 0x03	; 3
    17ec:	60 e0       	ldi	r22, 0x00	; 0
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	0e 94 ad 08 	call	0x115a	; 0x115a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	62 e0       	ldi	r22, 0x02	; 2
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	0e 94 ad 08 	call	0x115a	; 0x115a <GPIO_setupPinDirection>
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a0 ea       	ldi	r26, 0xA0	; 160
    1804:	b1 e4       	ldi	r27, 0x41	; 65
    1806:	8b 87       	std	Y+11, r24	; 0x0b
    1808:	9c 87       	std	Y+12, r25	; 0x0c
    180a:	ad 87       	std	Y+13, r26	; 0x0d
    180c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1810:	7c 85       	ldd	r23, Y+12	; 0x0c
    1812:	8d 85       	ldd	r24, Y+13	; 0x0d
    1814:	9e 85       	ldd	r25, Y+14	; 0x0e
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	4a e7       	ldi	r20, 0x7A	; 122
    181c:	53 e4       	ldi	r21, 0x43	; 67
    181e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	8f 83       	std	Y+7, r24	; 0x07
    1828:	98 87       	std	Y+8, r25	; 0x08
    182a:	a9 87       	std	Y+9, r26	; 0x09
    182c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	40 e8       	ldi	r20, 0x80	; 128
    183c:	5f e3       	ldi	r21, 0x3F	; 63
    183e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1842:	88 23       	and	r24, r24
    1844:	2c f4       	brge	.+10     	; 0x1850 <LCD_init+0x7a>
		__ticks = 1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9e 83       	std	Y+6, r25	; 0x06
    184c:	8d 83       	std	Y+5, r24	; 0x05
    184e:	3f c0       	rjmp	.+126    	; 0x18ce <LCD_init+0xf8>
	else if (__tmp > 65535)
    1850:	6f 81       	ldd	r22, Y+7	; 0x07
    1852:	78 85       	ldd	r23, Y+8	; 0x08
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	9a 85       	ldd	r25, Y+10	; 0x0a
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	4f e7       	ldi	r20, 0x7F	; 127
    185e:	57 e4       	ldi	r21, 0x47	; 71
    1860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1864:	18 16       	cp	r1, r24
    1866:	4c f5       	brge	.+82     	; 0x18ba <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1868:	6b 85       	ldd	r22, Y+11	; 0x0b
    186a:	7c 85       	ldd	r23, Y+12	; 0x0c
    186c:	8d 85       	ldd	r24, Y+13	; 0x0d
    186e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	40 e2       	ldi	r20, 0x20	; 32
    1876:	51 e4       	ldi	r21, 0x41	; 65
    1878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <LCD_init+0xda>
    1892:	89 e1       	ldi	r24, 0x19	; 25
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	9c 81       	ldd	r25, Y+4	; 0x04
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_init+0xc8>
    18a2:	9c 83       	std	Y+4, r25	; 0x04
    18a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	9e 81       	ldd	r25, Y+6	; 0x06
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	69 f7       	brne	.-38     	; 0x1892 <LCD_init+0xbc>
    18b8:	14 c0       	rjmp	.+40     	; 0x18e2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9e 83       	std	Y+6, r25	; 0x06
    18cc:	8d 83       	std	Y+5, r24	; 0x05
    18ce:	8d 81       	ldd	r24, Y+5	; 0x05
    18d0:	9e 81       	ldd	r25, Y+6	; 0x06
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	9a 81       	ldd	r25, Y+2	; 0x02
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <LCD_init+0x104>
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	6f ef       	ldi	r22, 0xFF	; 255
    18e6:	0e 94 1e 0b 	call	0x163c	; 0x163c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    18ea:	88 e3       	ldi	r24, 0x38	; 56
    18ec:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    18f0:	8c e0       	ldi	r24, 0x0C	; 12
    18f2:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_sendCommand>
}
    18fc:	2e 96       	adiw	r28, 0x0e	; 14
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	e9 97       	sbiw	r28, 0x39	; 57
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1924:	83 e0       	ldi	r24, 0x03	; 3
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e8       	ldi	r26, 0x80	; 128
    1934:	bf e3       	ldi	r27, 0x3F	; 63
    1936:	8d ab       	std	Y+53, r24	; 0x35
    1938:	9e ab       	std	Y+54, r25	; 0x36
    193a:	af ab       	std	Y+55, r26	; 0x37
    193c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193e:	6d a9       	ldd	r22, Y+53	; 0x35
    1940:	7e a9       	ldd	r23, Y+54	; 0x36
    1942:	8f a9       	ldd	r24, Y+55	; 0x37
    1944:	98 ad       	ldd	r25, Y+56	; 0x38
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a e7       	ldi	r20, 0x7A	; 122
    194c:	53 e4       	ldi	r21, 0x43	; 67
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	89 ab       	std	Y+49, r24	; 0x31
    1958:	9a ab       	std	Y+50, r25	; 0x32
    195a:	ab ab       	std	Y+51, r26	; 0x33
    195c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    195e:	69 a9       	ldd	r22, Y+49	; 0x31
    1960:	7a a9       	ldd	r23, Y+50	; 0x32
    1962:	8b a9       	ldd	r24, Y+51	; 0x33
    1964:	9c a9       	ldd	r25, Y+52	; 0x34
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1972:	88 23       	and	r24, r24
    1974:	2c f4       	brge	.+10     	; 0x1980 <LCD_sendCommand+0x72>
		__ticks = 1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	98 ab       	std	Y+48, r25	; 0x30
    197c:	8f a7       	std	Y+47, r24	; 0x2f
    197e:	3f c0       	rjmp	.+126    	; 0x19fe <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1980:	69 a9       	ldd	r22, Y+49	; 0x31
    1982:	7a a9       	ldd	r23, Y+50	; 0x32
    1984:	8b a9       	ldd	r24, Y+51	; 0x33
    1986:	9c a9       	ldd	r25, Y+52	; 0x34
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	4f e7       	ldi	r20, 0x7F	; 127
    198e:	57 e4       	ldi	r21, 0x47	; 71
    1990:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1994:	18 16       	cp	r1, r24
    1996:	4c f5       	brge	.+82     	; 0x19ea <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1998:	6d a9       	ldd	r22, Y+53	; 0x35
    199a:	7e a9       	ldd	r23, Y+54	; 0x36
    199c:	8f a9       	ldd	r24, Y+55	; 0x37
    199e:	98 ad       	ldd	r25, Y+56	; 0x38
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e2       	ldi	r20, 0x20	; 32
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	98 ab       	std	Y+48, r25	; 0x30
    19be:	8f a7       	std	Y+47, r24	; 0x2f
    19c0:	0f c0       	rjmp	.+30     	; 0x19e0 <LCD_sendCommand+0xd2>
    19c2:	89 e1       	ldi	r24, 0x19	; 25
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9e a7       	std	Y+46, r25	; 0x2e
    19c8:	8d a7       	std	Y+45, r24	; 0x2d
    19ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    19cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <LCD_sendCommand+0xc0>
    19d2:	9e a7       	std	Y+46, r25	; 0x2e
    19d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d8:	98 a9       	ldd	r25, Y+48	; 0x30
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	98 ab       	std	Y+48, r25	; 0x30
    19de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e2:	98 a9       	ldd	r25, Y+48	; 0x30
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	69 f7       	brne	.-38     	; 0x19c2 <LCD_sendCommand+0xb4>
    19e8:	14 c0       	rjmp	.+40     	; 0x1a12 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ea:	69 a9       	ldd	r22, Y+49	; 0x31
    19ec:	7a a9       	ldd	r23, Y+50	; 0x32
    19ee:	8b a9       	ldd	r24, Y+51	; 0x33
    19f0:	9c a9       	ldd	r25, Y+52	; 0x34
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	98 ab       	std	Y+48, r25	; 0x30
    19fc:	8f a7       	std	Y+47, r24	; 0x2f
    19fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a00:	98 a9       	ldd	r25, Y+48	; 0x30
    1a02:	9c a7       	std	Y+44, r25	; 0x2c
    1a04:	8b a7       	std	Y+43, r24	; 0x2b
    1a06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a08:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <LCD_sendCommand+0xfc>
    1a0e:	9c a7       	std	Y+44, r25	; 0x2c
    1a10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	62 e0       	ldi	r22, 0x02	; 2
    1a16:	41 e0       	ldi	r20, 0x01	; 1
    1a18:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	a0 e8       	ldi	r26, 0x80	; 128
    1a22:	bf e3       	ldi	r27, 0x3F	; 63
    1a24:	8f a3       	std	Y+39, r24	; 0x27
    1a26:	98 a7       	std	Y+40, r25	; 0x28
    1a28:	a9 a7       	std	Y+41, r26	; 0x29
    1a2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a30:	89 a5       	ldd	r24, Y+41	; 0x29
    1a32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	4a e7       	ldi	r20, 0x7A	; 122
    1a3a:	53 e4       	ldi	r21, 0x43	; 67
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	8b a3       	std	Y+35, r24	; 0x23
    1a46:	9c a3       	std	Y+36, r25	; 0x24
    1a48:	ad a3       	std	Y+37, r26	; 0x25
    1a4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a50:	8d a1       	ldd	r24, Y+37	; 0x25
    1a52:	9e a1       	ldd	r25, Y+38	; 0x26
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	5f e3       	ldi	r21, 0x3F	; 63
    1a5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a60:	88 23       	and	r24, r24
    1a62:	2c f4       	brge	.+10     	; 0x1a6e <LCD_sendCommand+0x160>
		__ticks = 1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9a a3       	std	Y+34, r25	; 0x22
    1a6a:	89 a3       	std	Y+33, r24	; 0x21
    1a6c:	3f c0       	rjmp	.+126    	; 0x1aec <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1a6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a70:	7c a1       	ldd	r23, Y+36	; 0x24
    1a72:	8d a1       	ldd	r24, Y+37	; 0x25
    1a74:	9e a1       	ldd	r25, Y+38	; 0x26
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	3f ef       	ldi	r19, 0xFF	; 255
    1a7a:	4f e7       	ldi	r20, 0x7F	; 127
    1a7c:	57 e4       	ldi	r21, 0x47	; 71
    1a7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	4c f5       	brge	.+82     	; 0x1ad8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a86:	6f a1       	ldd	r22, Y+39	; 0x27
    1a88:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e2       	ldi	r20, 0x20	; 32
    1a94:	51 e4       	ldi	r21, 0x41	; 65
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	bc 01       	movw	r22, r24
    1aa0:	cd 01       	movw	r24, r26
    1aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa6:	dc 01       	movw	r26, r24
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	9a a3       	std	Y+34, r25	; 0x22
    1aac:	89 a3       	std	Y+33, r24	; 0x21
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <LCD_sendCommand+0x1c0>
    1ab0:	89 e1       	ldi	r24, 0x19	; 25
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	98 a3       	std	Y+32, r25	; 0x20
    1ab6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ab8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aba:	98 a1       	ldd	r25, Y+32	; 0x20
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <LCD_sendCommand+0x1ae>
    1ac0:	98 a3       	std	Y+32, r25	; 0x20
    1ac2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	9a a3       	std	Y+34, r25	; 0x22
    1acc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ace:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	69 f7       	brne	.-38     	; 0x1ab0 <LCD_sendCommand+0x1a2>
    1ad6:	14 c0       	rjmp	.+40     	; 0x1b00 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad8:	6b a1       	ldd	r22, Y+35	; 0x23
    1ada:	7c a1       	ldd	r23, Y+36	; 0x24
    1adc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ade:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9a a3       	std	Y+34, r25	; 0x22
    1aea:	89 a3       	std	Y+33, r24	; 0x21
    1aec:	89 a1       	ldd	r24, Y+33	; 0x21
    1aee:	9a a1       	ldd	r25, Y+34	; 0x22
    1af0:	9e 8f       	std	Y+30, r25	; 0x1e
    1af2:	8d 8f       	std	Y+29, r24	; 0x1d
    1af4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <LCD_sendCommand+0x1ea>
    1afc:	9e 8f       	std	Y+30, r25	; 0x1e
    1afe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	69 ad       	ldd	r22, Y+57	; 0x39
    1b04:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GPIO_writePort>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e8       	ldi	r26, 0x80	; 128
    1b0e:	bf e3       	ldi	r27, 0x3F	; 63
    1b10:	89 8f       	std	Y+25, r24	; 0x19
    1b12:	9a 8f       	std	Y+26, r25	; 0x1a
    1b14:	ab 8f       	std	Y+27, r26	; 0x1b
    1b16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a e7       	ldi	r20, 0x7A	; 122
    1b26:	53 e4       	ldi	r21, 0x43	; 67
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8d 8b       	std	Y+21, r24	; 0x15
    1b32:	9e 8b       	std	Y+22, r25	; 0x16
    1b34:	af 8b       	std	Y+23, r26	; 0x17
    1b36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b38:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9c 8b       	std	Y+20, r25	; 0x14
    1b56:	8b 8b       	std	Y+19, r24	; 0x13
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b60:	98 8d       	ldd	r25, Y+24	; 0x18
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	69 8d       	ldd	r22, Y+25	; 0x19
    1b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9c 8b       	std	Y+20, r25	; 0x14
    1b98:	8b 8b       	std	Y+19, r24	; 0x13
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_sendCommand+0x2ac>
    1b9c:	89 e1       	ldi	r24, 0x19	; 25
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9a 8b       	std	Y+18, r25	; 0x12
    1ba2:	89 8b       	std	Y+17, r24	; 0x11
    1ba4:	89 89       	ldd	r24, Y+17	; 0x11
    1ba6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_sendCommand+0x29a>
    1bac:	9a 8b       	std	Y+18, r25	; 0x12
    1bae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9c 8b       	std	Y+20, r25	; 0x14
    1bb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <LCD_sendCommand+0x28e>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bca:	98 8d       	ldd	r25, Y+24	; 0x18
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	98 8b       	std	Y+16, r25	; 0x10
    1bde:	8f 87       	std	Y+15, r24	; 0x0f
    1be0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be2:	98 89       	ldd	r25, Y+16	; 0x10
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_sendCommand+0x2d6>
    1be8:	98 8b       	std	Y+16, r25	; 0x10
    1bea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	62 e0       	ldi	r22, 0x02	; 2
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 e8       	ldi	r26, 0x80	; 128
    1bfc:	bf e3       	ldi	r27, 0x3F	; 63
    1bfe:	8b 87       	std	Y+11, r24	; 0x0b
    1c00:	9c 87       	std	Y+12, r25	; 0x0c
    1c02:	ad 87       	std	Y+13, r26	; 0x0d
    1c04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4a e7       	ldi	r20, 0x7A	; 122
    1c14:	53 e4       	ldi	r21, 0x43	; 67
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	8f 83       	std	Y+7, r24	; 0x07
    1c20:	98 87       	std	Y+8, r25	; 0x08
    1c22:	a9 87       	std	Y+9, r26	; 0x09
    1c24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c26:	6f 81       	ldd	r22, Y+7	; 0x07
    1c28:	78 85       	ldd	r23, Y+8	; 0x08
    1c2a:	89 85       	ldd	r24, Y+9	; 0x09
    1c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1c48:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4a:	78 85       	ldd	r23, Y+8	; 0x08
    1c4c:	89 85       	ldd	r24, Y+9	; 0x09
    1c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <LCD_sendCommand+0x39a>
    1c8a:	89 e1       	ldi	r24, 0x19	; 25
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9c 83       	std	Y+4, r25	; 0x04
    1c90:	8b 83       	std	Y+3, r24	; 0x03
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_sendCommand+0x388>
    1c9a:	9c 83       	std	Y+4, r25	; 0x04
    1c9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9e 83       	std	Y+6, r25	; 0x06
    1ca6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <LCD_sendCommand+0x37c>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_sendCommand+0x3c4>
    1cd6:	9a 83       	std	Y+2, r25	; 0x02
    1cd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cda:	e9 96       	adiw	r28, 0x39	; 57
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	e9 97       	sbiw	r28, 0x39	; 57
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1d02:	83 e0       	ldi	r24, 0x03	; 3
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	41 e0       	ldi	r20, 0x01	; 1
    1d08:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a0 e8       	ldi	r26, 0x80	; 128
    1d12:	bf e3       	ldi	r27, 0x3F	; 63
    1d14:	8d ab       	std	Y+53, r24	; 0x35
    1d16:	9e ab       	std	Y+54, r25	; 0x36
    1d18:	af ab       	std	Y+55, r26	; 0x37
    1d1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d20:	8f a9       	ldd	r24, Y+55	; 0x37
    1d22:	98 ad       	ldd	r25, Y+56	; 0x38
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	53 e4       	ldi	r21, 0x43	; 67
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	89 ab       	std	Y+49, r24	; 0x31
    1d36:	9a ab       	std	Y+50, r25	; 0x32
    1d38:	ab ab       	std	Y+51, r26	; 0x33
    1d3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d40:	8b a9       	ldd	r24, Y+51	; 0x33
    1d42:	9c a9       	ldd	r25, Y+52	; 0x34
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <LCD_displayCharacter+0x72>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	98 ab       	std	Y+48, r25	; 0x30
    1d5a:	8f a7       	std	Y+47, r24	; 0x2f
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d60:	7a a9       	ldd	r23, Y+50	; 0x32
    1d62:	8b a9       	ldd	r24, Y+51	; 0x33
    1d64:	9c a9       	ldd	r25, Y+52	; 0x34
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6d a9       	ldd	r22, Y+53	; 0x35
    1d78:	7e a9       	ldd	r23, Y+54	; 0x36
    1d7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1d7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	98 ab       	std	Y+48, r25	; 0x30
    1d9c:	8f a7       	std	Y+47, r24	; 0x2f
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <LCD_displayCharacter+0xd2>
    1da0:	89 e1       	ldi	r24, 0x19	; 25
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9e a7       	std	Y+46, r25	; 0x2e
    1da6:	8d a7       	std	Y+45, r24	; 0x2d
    1da8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1daa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_displayCharacter+0xc0>
    1db0:	9e a7       	std	Y+46, r25	; 0x2e
    1db2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db6:	98 a9       	ldd	r25, Y+48	; 0x30
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	98 ab       	std	Y+48, r25	; 0x30
    1dbc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <LCD_displayCharacter+0xb4>
    1dc6:	14 c0       	rjmp	.+40     	; 0x1df0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dca:	7a a9       	ldd	r23, Y+50	; 0x32
    1dcc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dce:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	98 ab       	std	Y+48, r25	; 0x30
    1dda:	8f a7       	std	Y+47, r24	; 0x2f
    1ddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dde:	98 a9       	ldd	r25, Y+48	; 0x30
    1de0:	9c a7       	std	Y+44, r25	; 0x2c
    1de2:	8b a7       	std	Y+43, r24	; 0x2b
    1de4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_displayCharacter+0xfc>
    1dec:	9c a7       	std	Y+44, r25	; 0x2c
    1dee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	62 e0       	ldi	r22, 0x02	; 2
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	a0 e8       	ldi	r26, 0x80	; 128
    1e00:	bf e3       	ldi	r27, 0x3F	; 63
    1e02:	8f a3       	std	Y+39, r24	; 0x27
    1e04:	98 a7       	std	Y+40, r25	; 0x28
    1e06:	a9 a7       	std	Y+41, r26	; 0x29
    1e08:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e0c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e0e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e10:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4a e7       	ldi	r20, 0x7A	; 122
    1e18:	53 e4       	ldi	r21, 0x43	; 67
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	8b a3       	std	Y+35, r24	; 0x23
    1e24:	9c a3       	std	Y+36, r25	; 0x24
    1e26:	ad a3       	std	Y+37, r26	; 0x25
    1e28:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e30:	9e a1       	ldd	r25, Y+38	; 0x26
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	40 e8       	ldi	r20, 0x80	; 128
    1e38:	5f e3       	ldi	r21, 0x3F	; 63
    1e3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e3e:	88 23       	and	r24, r24
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <LCD_displayCharacter+0x160>
		__ticks = 1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9a a3       	std	Y+34, r25	; 0x22
    1e48:	89 a3       	std	Y+33, r24	; 0x21
    1e4a:	3f c0       	rjmp	.+126    	; 0x1eca <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1e4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e50:	8d a1       	ldd	r24, Y+37	; 0x25
    1e52:	9e a1       	ldd	r25, Y+38	; 0x26
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	3f ef       	ldi	r19, 0xFF	; 255
    1e58:	4f e7       	ldi	r20, 0x7F	; 127
    1e5a:	57 e4       	ldi	r21, 0x47	; 71
    1e5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	4c f5       	brge	.+82     	; 0x1eb6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e64:	6f a1       	ldd	r22, Y+39	; 0x27
    1e66:	78 a5       	ldd	r23, Y+40	; 0x28
    1e68:	89 a5       	ldd	r24, Y+41	; 0x29
    1e6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e2       	ldi	r20, 0x20	; 32
    1e72:	51 e4       	ldi	r21, 0x41	; 65
    1e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	bc 01       	movw	r22, r24
    1e7e:	cd 01       	movw	r24, r26
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	9a a3       	std	Y+34, r25	; 0x22
    1e8a:	89 a3       	std	Y+33, r24	; 0x21
    1e8c:	0f c0       	rjmp	.+30     	; 0x1eac <LCD_displayCharacter+0x1c0>
    1e8e:	89 e1       	ldi	r24, 0x19	; 25
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	98 a3       	std	Y+32, r25	; 0x20
    1e94:	8f 8f       	std	Y+31, r24	; 0x1f
    1e96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e98:	98 a1       	ldd	r25, Y+32	; 0x20
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_displayCharacter+0x1ae>
    1e9e:	98 a3       	std	Y+32, r25	; 0x20
    1ea0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	9a a3       	std	Y+34, r25	; 0x22
    1eaa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eac:	89 a1       	ldd	r24, Y+33	; 0x21
    1eae:	9a a1       	ldd	r25, Y+34	; 0x22
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	69 f7       	brne	.-38     	; 0x1e8e <LCD_displayCharacter+0x1a2>
    1eb4:	14 c0       	rjmp	.+40     	; 0x1ede <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1eb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eba:	8d a1       	ldd	r24, Y+37	; 0x25
    1ebc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9a a3       	std	Y+34, r25	; 0x22
    1ec8:	89 a3       	std	Y+33, r24	; 0x21
    1eca:	89 a1       	ldd	r24, Y+33	; 0x21
    1ecc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ece:	9e 8f       	std	Y+30, r25	; 0x1e
    1ed0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ed2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ed4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <LCD_displayCharacter+0x1ea>
    1eda:	9e 8f       	std	Y+30, r25	; 0x1e
    1edc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	69 ad       	ldd	r22, Y+57	; 0x39
    1ee2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GPIO_writePort>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e8       	ldi	r26, 0x80	; 128
    1eec:	bf e3       	ldi	r27, 0x3F	; 63
    1eee:	89 8f       	std	Y+25, r24	; 0x19
    1ef0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ef4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a e7       	ldi	r20, 0x7A	; 122
    1f04:	53 e4       	ldi	r21, 0x43	; 67
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8d 8b       	std	Y+21, r24	; 0x15
    1f10:	9e 8b       	std	Y+22, r25	; 0x16
    1f12:	af 8b       	std	Y+23, r26	; 0x17
    1f14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f16:	6d 89       	ldd	r22, Y+21	; 0x15
    1f18:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9c 8b       	std	Y+20, r25	; 0x14
    1f34:	8b 8b       	std	Y+19, r24	; 0x13
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1f38:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	69 8d       	ldd	r22, Y+25	; 0x19
    1f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_displayCharacter+0x2ac>
    1f7a:	89 e1       	ldi	r24, 0x19	; 25
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9a 8b       	std	Y+18, r25	; 0x12
    1f80:	89 8b       	std	Y+17, r24	; 0x11
    1f82:	89 89       	ldd	r24, Y+17	; 0x11
    1f84:	9a 89       	ldd	r25, Y+18	; 0x12
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_displayCharacter+0x29a>
    1f8a:	9a 8b       	std	Y+18, r25	; 0x12
    1f8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_displayCharacter+0x28e>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9c 8b       	std	Y+20, r25	; 0x14
    1fb4:	8b 8b       	std	Y+19, r24	; 0x13
    1fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fba:	98 8b       	std	Y+16, r25	; 0x10
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
    1fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc0:	98 89       	ldd	r25, Y+16	; 0x10
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_displayCharacter+0x2d6>
    1fc6:	98 8b       	std	Y+16, r25	; 0x10
    1fc8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fca:	83 e0       	ldi	r24, 0x03	; 3
    1fcc:	62 e0       	ldi	r22, 0x02	; 2
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	0e 94 98 09 	call	0x1330	; 0x1330 <GPIO_writePin>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e8       	ldi	r26, 0x80	; 128
    1fda:	bf e3       	ldi	r27, 0x3F	; 63
    1fdc:	8b 87       	std	Y+11, r24	; 0x0b
    1fde:	9c 87       	std	Y+12, r25	; 0x0c
    1fe0:	ad 87       	std	Y+13, r26	; 0x0d
    1fe2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a e7       	ldi	r20, 0x7A	; 122
    1ff2:	53 e4       	ldi	r21, 0x43	; 67
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8f 83       	std	Y+7, r24	; 0x07
    1ffe:	98 87       	std	Y+8, r25	; 0x08
    2000:	a9 87       	std	Y+9, r26	; 0x09
    2002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2004:	6f 81       	ldd	r22, Y+7	; 0x07
    2006:	78 85       	ldd	r23, Y+8	; 0x08
    2008:	89 85       	ldd	r24, Y+9	; 0x09
    200a:	9a 85       	ldd	r25, Y+10	; 0x0a
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2040:	7c 85       	ldd	r23, Y+12	; 0x0c
    2042:	8d 85       	ldd	r24, Y+13	; 0x0d
    2044:	9e 85       	ldd	r25, Y+14	; 0x0e
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_displayCharacter+0x39a>
    2068:	89 e1       	ldi	r24, 0x19	; 25
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_displayCharacter+0x388>
    2078:	9c 83       	std	Y+4, r25	; 0x04
    207a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <LCD_displayCharacter+0x37c>
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	6f 81       	ldd	r22, Y+7	; 0x07
    2092:	78 85       	ldd	r23, Y+8	; 0x08
    2094:	89 85       	ldd	r24, Y+9	; 0x09
    2096:	9a 85       	ldd	r25, Y+10	; 0x0a
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_displayCharacter+0x3c4>
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    20b8:	e9 96       	adiw	r28, 0x39	; 57
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <LCD_displayString+0x6>
    20d0:	0f 92       	push	r0
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	9b 83       	std	Y+3, r25	; 0x03
    20d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20da:	19 82       	std	Y+1, r1	; 0x01
    20dc:	0e c0       	rjmp	.+28     	; 0x20fa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	fc 01       	movw	r30, r24
    20ea:	e2 0f       	add	r30, r18
    20ec:	f3 1f       	adc	r31, r19
    20ee:	80 81       	ld	r24, Z
    20f0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <LCD_displayCharacter>
		i++;
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	8f 5f       	subi	r24, 0xFF	; 255
    20f8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	9b 81       	ldd	r25, Y+3	; 0x03
    2104:	fc 01       	movw	r30, r24
    2106:	e2 0f       	add	r30, r18
    2108:	f3 1f       	adc	r31, r19
    210a:	80 81       	ld	r24, Z
    210c:	88 23       	and	r24, r24
    210e:	39 f7       	brne	.-50     	; 0x20de <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <LCD_moveCursor+0x6>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <LCD_moveCursor+0x8>
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	8a 83       	std	Y+2, r24	; 0x02
    212c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	3d 83       	std	Y+5, r19	; 0x05
    2136:	2c 83       	std	Y+4, r18	; 0x04
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	9d 81       	ldd	r25, Y+5	; 0x05
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	91 05       	cpc	r25, r1
    2140:	c1 f0       	breq	.+48     	; 0x2172 <LCD_moveCursor+0x56>
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	22 30       	cpi	r18, 0x02	; 2
    2148:	31 05       	cpc	r19, r1
    214a:	2c f4       	brge	.+10     	; 0x2156 <LCD_moveCursor+0x3a>
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	9d 81       	ldd	r25, Y+5	; 0x05
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	61 f0       	breq	.+24     	; 0x216c <LCD_moveCursor+0x50>
    2154:	19 c0       	rjmp	.+50     	; 0x2188 <LCD_moveCursor+0x6c>
    2156:	2c 81       	ldd	r18, Y+4	; 0x04
    2158:	3d 81       	ldd	r19, Y+5	; 0x05
    215a:	22 30       	cpi	r18, 0x02	; 2
    215c:	31 05       	cpc	r19, r1
    215e:	69 f0       	breq	.+26     	; 0x217a <LCD_moveCursor+0x5e>
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	9d 81       	ldd	r25, Y+5	; 0x05
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	91 05       	cpc	r25, r1
    2168:	61 f0       	breq	.+24     	; 0x2182 <LCD_moveCursor+0x66>
    216a:	0e c0       	rjmp	.+28     	; 0x2188 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	0b c0       	rjmp	.+22     	; 0x2188 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	80 5c       	subi	r24, 0xC0	; 192
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	07 c0       	rjmp	.+14     	; 0x2188 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	80 5f       	subi	r24, 0xF0	; 240
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	80 5b       	subi	r24, 0xB0	; 176
    2186:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	80 68       	ori	r24, 0x80	; 128
    218c:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_sendCommand>
}
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <LCD_displayStringRowColumn+0x6>
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <LCD_displayStringRowColumn+0x8>
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	6a 83       	std	Y+2, r22	; 0x02
    21b0:	5c 83       	std	Y+4, r21	; 0x04
    21b2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	6a 81       	ldd	r22, Y+2	; 0x02
    21b8:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_displayString>
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	62 97       	sbiw	r28, 0x12	; 18
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	9a 8b       	std	Y+18, r25	; 0x12
    21e8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    21ea:	89 89       	ldd	r24, Y+17	; 0x11
    21ec:	9a 89       	ldd	r25, Y+18	; 0x12
    21ee:	9e 01       	movw	r18, r28
    21f0:	2f 5f       	subi	r18, 0xFF	; 255
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	b9 01       	movw	r22, r18
    21f6:	4a e0       	ldi	r20, 0x0A	; 10
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	0e 94 c5 11 	call	0x238a	; 0x238a <itoa>
   LCD_displayString(buff); /* Display the string */
    21fe:	ce 01       	movw	r24, r28
    2200:	01 96       	adiw	r24, 0x01	; 1
    2202:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_displayString>
}
    2206:	62 96       	adiw	r28, 0x12	; 18
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	0e 94 87 0c 	call	0x190e	; 0x190e <LCD_sendCommand>
}
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <LM35_getTemperature+0x6>
    2232:	0f 92       	push	r0
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0; //uint8 because temperature range (0-150)
    2238:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0; // uin16 because digital range (0-1023)
    223a:	1a 82       	std	Y+2, r1	; 0x02
    223c:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    223e:	82 e0       	ldi	r24, 0x02	; 2
    2240:	0e 94 76 08 	call	0x10ec	; 0x10ec <ADC_readChannel>
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	cc 01       	movw	r24, r24
    224e:	a0 e0       	ldi	r26, 0x00	; 0
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	26 e9       	ldi	r18, 0x96	; 150
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	bc 01       	movw	r22, r24
    225c:	cd 01       	movw	r24, r26
    225e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__mulsi3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	2a e0       	ldi	r18, 0x0A	; 10
    2278:	37 ed       	ldi	r19, 0xD7	; 215
    227a:	43 e2       	ldi	r20, 0x23	; 35
    227c:	50 e4       	ldi	r21, 0x40	; 64
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 ed       	ldi	r19, 0xD0	; 208
    228e:	4f eb       	ldi	r20, 0xBF	; 191
    2290:	54 e4       	ldi	r21, 0x44	; 68
    2292:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <__mulsi3>:
    22b6:	62 9f       	mul	r22, r18
    22b8:	d0 01       	movw	r26, r0
    22ba:	73 9f       	mul	r23, r19
    22bc:	f0 01       	movw	r30, r0
    22be:	82 9f       	mul	r24, r18
    22c0:	e0 0d       	add	r30, r0
    22c2:	f1 1d       	adc	r31, r1
    22c4:	64 9f       	mul	r22, r20
    22c6:	e0 0d       	add	r30, r0
    22c8:	f1 1d       	adc	r31, r1
    22ca:	92 9f       	mul	r25, r18
    22cc:	f0 0d       	add	r31, r0
    22ce:	83 9f       	mul	r24, r19
    22d0:	f0 0d       	add	r31, r0
    22d2:	74 9f       	mul	r23, r20
    22d4:	f0 0d       	add	r31, r0
    22d6:	65 9f       	mul	r22, r21
    22d8:	f0 0d       	add	r31, r0
    22da:	99 27       	eor	r25, r25
    22dc:	72 9f       	mul	r23, r18
    22de:	b0 0d       	add	r27, r0
    22e0:	e1 1d       	adc	r30, r1
    22e2:	f9 1f       	adc	r31, r25
    22e4:	63 9f       	mul	r22, r19
    22e6:	b0 0d       	add	r27, r0
    22e8:	e1 1d       	adc	r30, r1
    22ea:	f9 1f       	adc	r31, r25
    22ec:	bd 01       	movw	r22, r26
    22ee:	cf 01       	movw	r24, r30
    22f0:	11 24       	eor	r1, r1
    22f2:	08 95       	ret

000022f4 <__udivmodhi4>:
    22f4:	aa 1b       	sub	r26, r26
    22f6:	bb 1b       	sub	r27, r27
    22f8:	51 e1       	ldi	r21, 0x11	; 17
    22fa:	07 c0       	rjmp	.+14     	; 0x230a <__udivmodhi4_ep>

000022fc <__udivmodhi4_loop>:
    22fc:	aa 1f       	adc	r26, r26
    22fe:	bb 1f       	adc	r27, r27
    2300:	a6 17       	cp	r26, r22
    2302:	b7 07       	cpc	r27, r23
    2304:	10 f0       	brcs	.+4      	; 0x230a <__udivmodhi4_ep>
    2306:	a6 1b       	sub	r26, r22
    2308:	b7 0b       	sbc	r27, r23

0000230a <__udivmodhi4_ep>:
    230a:	88 1f       	adc	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	5a 95       	dec	r21
    2310:	a9 f7       	brne	.-22     	; 0x22fc <__udivmodhi4_loop>
    2312:	80 95       	com	r24
    2314:	90 95       	com	r25
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	08 95       	ret

0000231c <__prologue_saves__>:
    231c:	2f 92       	push	r2
    231e:	3f 92       	push	r3
    2320:	4f 92       	push	r4
    2322:	5f 92       	push	r5
    2324:	6f 92       	push	r6
    2326:	7f 92       	push	r7
    2328:	8f 92       	push	r8
    232a:	9f 92       	push	r9
    232c:	af 92       	push	r10
    232e:	bf 92       	push	r11
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	ca 1b       	sub	r28, r26
    2346:	db 0b       	sbc	r29, r27
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	09 94       	ijmp

00002354 <__epilogue_restores__>:
    2354:	2a 88       	ldd	r2, Y+18	; 0x12
    2356:	39 88       	ldd	r3, Y+17	; 0x11
    2358:	48 88       	ldd	r4, Y+16	; 0x10
    235a:	5f 84       	ldd	r5, Y+15	; 0x0f
    235c:	6e 84       	ldd	r6, Y+14	; 0x0e
    235e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2360:	8c 84       	ldd	r8, Y+12	; 0x0c
    2362:	9b 84       	ldd	r9, Y+11	; 0x0b
    2364:	aa 84       	ldd	r10, Y+10	; 0x0a
    2366:	b9 84       	ldd	r11, Y+9	; 0x09
    2368:	c8 84       	ldd	r12, Y+8	; 0x08
    236a:	df 80       	ldd	r13, Y+7	; 0x07
    236c:	ee 80       	ldd	r14, Y+6	; 0x06
    236e:	fd 80       	ldd	r15, Y+5	; 0x05
    2370:	0c 81       	ldd	r16, Y+4	; 0x04
    2372:	1b 81       	ldd	r17, Y+3	; 0x03
    2374:	aa 81       	ldd	r26, Y+2	; 0x02
    2376:	b9 81       	ldd	r27, Y+1	; 0x01
    2378:	ce 0f       	add	r28, r30
    237a:	d1 1d       	adc	r29, r1
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	ed 01       	movw	r28, r26
    2388:	08 95       	ret

0000238a <itoa>:
    238a:	fb 01       	movw	r30, r22
    238c:	9f 01       	movw	r18, r30
    238e:	e8 94       	clt
    2390:	42 30       	cpi	r20, 0x02	; 2
    2392:	c4 f0       	brlt	.+48     	; 0x23c4 <itoa+0x3a>
    2394:	45 32       	cpi	r20, 0x25	; 37
    2396:	b4 f4       	brge	.+44     	; 0x23c4 <itoa+0x3a>
    2398:	4a 30       	cpi	r20, 0x0A	; 10
    239a:	29 f4       	brne	.+10     	; 0x23a6 <itoa+0x1c>
    239c:	97 fb       	bst	r25, 7
    239e:	1e f4       	brtc	.+6      	; 0x23a6 <itoa+0x1c>
    23a0:	90 95       	com	r25
    23a2:	81 95       	neg	r24
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	64 2f       	mov	r22, r20
    23a8:	77 27       	eor	r23, r23
    23aa:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__udivmodhi4>
    23ae:	80 5d       	subi	r24, 0xD0	; 208
    23b0:	8a 33       	cpi	r24, 0x3A	; 58
    23b2:	0c f0       	brlt	.+2      	; 0x23b6 <itoa+0x2c>
    23b4:	89 5d       	subi	r24, 0xD9	; 217
    23b6:	81 93       	st	Z+, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	a1 f7       	brne	.-24     	; 0x23a6 <itoa+0x1c>
    23be:	16 f4       	brtc	.+4      	; 0x23c4 <itoa+0x3a>
    23c0:	5d e2       	ldi	r21, 0x2D	; 45
    23c2:	51 93       	st	Z+, r21
    23c4:	10 82       	st	Z, r1
    23c6:	c9 01       	movw	r24, r18
    23c8:	0c 94 e6 11 	jmp	0x23cc	; 0x23cc <strrev>

000023cc <strrev>:
    23cc:	dc 01       	movw	r26, r24
    23ce:	fc 01       	movw	r30, r24
    23d0:	67 2f       	mov	r22, r23
    23d2:	71 91       	ld	r23, Z+
    23d4:	77 23       	and	r23, r23
    23d6:	e1 f7       	brne	.-8      	; 0x23d0 <strrev+0x4>
    23d8:	32 97       	sbiw	r30, 0x02	; 2
    23da:	04 c0       	rjmp	.+8      	; 0x23e4 <strrev+0x18>
    23dc:	7c 91       	ld	r23, X
    23de:	6d 93       	st	X+, r22
    23e0:	70 83       	st	Z, r23
    23e2:	62 91       	ld	r22, -Z
    23e4:	ae 17       	cp	r26, r30
    23e6:	bf 07       	cpc	r27, r31
    23e8:	c8 f3       	brcs	.-14     	; 0x23dc <strrev+0x10>
    23ea:	08 95       	ret

000023ec <_exit>:
    23ec:	f8 94       	cli

000023ee <__stop_program>:
    23ee:	ff cf       	rjmp	.-2      	; 0x23ee <__stop_program>
